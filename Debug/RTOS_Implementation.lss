
RTOS_Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000027d8  0000286c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800078  00800078  00002884  2**0
                  ALLOC
  3 .stab         00002d18  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e0  00000000  00000000  0000559c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000697c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a510  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b0cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 13 	call	0x262a	; 0x262a <main>
      8a:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTimer_voidTimerInit>:

void(*G_TIM0_CTC_Callback)(void);



void MTimer_voidTimerInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
		/*CTC Mode*/
		SET_BIT(TCCR0,3);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24

		/*SET CTC Interrupt Enable*/
		SET_BIT(TIMSK,1);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24


		/*Set Compare Match Value to 125*/
		OCR0 = 125;
     b78:	ec e5       	ldi	r30, 0x5C	; 92
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8d e7       	ldi	r24, 0x7D	; 125
     b7e:	80 83       	st	Z, r24

		/*Prescaller 64*/
		SET_BIT(TCCR0, 0);
     b80:	a3 e5       	ldi	r26, 0x53	; 83
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e3 e5       	ldi	r30, 0x53	; 83
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	8c 93       	st	X, r24

}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <MTimer_voidSetCompareMatchValue>:

void MTimer_voidSetCompareMatchValue(u8 A_u8CompValue){
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = A_u8CompValue;
     bbc:	ec e5       	ldi	r30, 0x5C	; 92
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	80 83       	st	Z, r24
}
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <MTimer0_u8CompareMatchCallback>:


u8 MTimer0_u8CompareMatchCallback(void(*A_pvCallback)(void)){
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <MTimer0_u8CompareMatchCallback+0x6>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9b 83       	std	Y+3, r25	; 0x03
     bda:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState =NoErr;
     bdc:	19 82       	std	Y+1, r1	; 0x01

	if(A_pvCallback != NULL){
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	39 f0       	breq	.+14     	; 0xbf4 <MTimer0_u8CompareMatchCallback+0x28>
		G_TIM0_CTC_Callback = A_pvCallback;
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	9b 81       	ldd	r25, Y+3	; 0x03
     bea:	90 93 8b 00 	sts	0x008B, r25
     bee:	80 93 8a 00 	sts	0x008A, r24
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <MTimer0_u8CompareMatchCallback+0x2c>
	}
	else{
		Local_u8ErrorState = Err;
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01

}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <__vector_10>:





ISR(TIMER0_COMP_vect){
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62

	if(G_TIM0_CTC_Callback != NULL){
     c30:	80 91 8a 00 	lds	r24, 0x008A
     c34:	90 91 8b 00 	lds	r25, 0x008B
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	29 f0       	breq	.+10     	; 0xc46 <__vector_10+0x40>
		G_TIM0_CTC_Callback();
     c3c:	e0 91 8a 00 	lds	r30, 0x008A
     c40:	f0 91 8b 00 	lds	r31, 0x008B
     c44:	09 95       	icall
		/*
		 * Do nothing
		 * */
	}

}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <RTOS_voidCreateTask>:


u16 G_u16Counter=0;


void RTOS_voidCreateTask(u8 A_u8Periorty, u16 A_u8Periodicty, void(*A_pvTaskFunc)(void)){
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <RTOS_voidCreateTask+0x6>
     c72:	00 d0       	rcall	.+0      	; 0xc74 <RTOS_voidCreateTask+0x8>
     c74:	0f 92       	push	r0
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	7b 83       	std	Y+3, r23	; 0x03
     c7e:	6a 83       	std	Y+2, r22	; 0x02
     c80:	5d 83       	std	Y+5, r21	; 0x05
     c82:	4c 83       	std	Y+4, r20	; 0x04

	if(A_u8Periorty < TASKS_NUMBER){
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	e8 f4       	brcc	.+58     	; 0xcc4 <RTOS_voidCreateTask+0x58>
		SystemTasks[A_u8Periorty].Periodicity = A_u8Periodicty;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	fc 01       	movw	r30, r24
     c9a:	e8 58       	subi	r30, 0x88	; 136
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	9b 81       	ldd	r25, Y+3	; 0x03
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
		SystemTasks[A_u8Periorty].TaskFun = A_pvTaskFunc;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	fc 01       	movw	r30, r24
     cb8:	e8 58       	subi	r30, 0x88	; 136
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
		/*
		 * Do Nothing
		 * */
	}

}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <RTOS_voidStart>:


void RTOS_voidStart(){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	MTimer0_u8CompareMatchCallback(&Scheduler);
     cdc:	89 e7       	ldi	r24, 0x79	; 121
     cde:	96 e0       	ldi	r25, 0x06	; 6
     ce0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <MTimer0_u8CompareMatchCallback>
	MGIE_voidEnable();
     ce4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <MGIE_voidEnable>
	MTimer_voidTimerInit();
     ce8:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTimer_voidTimerInit>
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <Scheduler>:



void Scheduler(void){
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62

	G_u16Counter++;
     cfc:	80 91 88 00 	lds	r24, 0x0088
     d00:	90 91 89 00 	lds	r25, 0x0089
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	90 93 89 00 	sts	0x0089, r25
     d0a:	80 93 88 00 	sts	0x0088, r24
	/*Loop On all Tasks */
	for(u8 Local_u8TacksCounter = 0; Local_u8TacksCounter < TASKS_NUMBER; Local_u8TacksCounter++){
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	37 c0       	rjmp	.+110    	; 0xd80 <Scheduler+0x8e>
		/*Check if The Task Has to be called*/
		if(G_u16Counter % SystemTasks[Local_u8TacksCounter].Periodicity == 0){
     d12:	40 91 88 00 	lds	r20, 0x0088
     d16:	50 91 89 00 	lds	r21, 0x0089
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	fc 01       	movw	r30, r24
     d2a:	e8 58       	subi	r30, 0x88	; 136
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	ca 01       	movw	r24, r20
     d34:	b9 01       	movw	r22, r18
     d36:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__udivmodhi4>
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	f1 f4       	brne	.+60     	; 0xd7a <Scheduler+0x88>
			/*Check if the Function Not equal NULL*/
			if(SystemTasks[Local_u8TacksCounter].TaskFun != NULL){
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	fc 01       	movw	r30, r24
     d50:	e8 58       	subi	r30, 0x88	; 136
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	79 f0       	breq	.+30     	; 0xd7a <Scheduler+0x88>
				SystemTasks[Local_u8TacksCounter].TaskFun();
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	fc 01       	movw	r30, r24
     d6e:	e8 58       	subi	r30, 0x88	; 136
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	09 95       	icall

void Scheduler(void){

	G_u16Counter++;
	/*Loop On all Tasks */
	for(u8 Local_u8TacksCounter = 0; Local_u8TacksCounter < TASKS_NUMBER; Local_u8TacksCounter++){
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	30 f2       	brcs	.-116    	; 0xd12 <Scheduler+0x20>
			}
		}

	}

}
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <MGIE_voidEnable>:
#include"GIE_Interface.h"




void MGIE_voidEnable(){
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
     d96:	af e5       	ldi	r26, 0x5F	; 95
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ef e5       	ldi	r30, 0x5F	; 95
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	8c 93       	st	X, r24
}
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <MGIE_voidDisable>:

void MGIE_voidDisable(){
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
     db2:	af e5       	ldi	r26, 0x5F	; 95
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef e5       	ldi	r30, 0x5F	; 95
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	8c 93       	st	X, r24
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <MUART_voidInit>:





void MUART_voidInit(){
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62

	UCSRB = 0b00011000;
     dce:	ea e2       	ldi	r30, 0x2A	; 42
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	88 e1       	ldi	r24, 0x18	; 24
     dd4:	80 83       	st	Z, r24

	UCSRC = 0b10000110;
     dd6:	e0 e4       	ldi	r30, 0x40	; 64
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	86 e8       	ldi	r24, 0x86	; 134
     ddc:	80 83       	st	Z, r24

	/*Select Baud Rate 9600*/
	UBRRL = 51;
     dde:	e9 e2       	ldi	r30, 0x29	; 41
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	83 e3       	ldi	r24, 0x33	; 51
     de4:	80 83       	st	Z, r24
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MUART_voidTransmit>:

void MUART_voidTransmit(u8 A_u8Data){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	89 83       	std	Y+1, r24	; 0x01

	/*Wait Till Transmit Buffer Is empty*/
	while(GET_BIT(UCSRA, 5) == 0);
     df8:	eb e2       	ldi	r30, 0x2B	; 43
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	82 95       	swap	r24
     e00:	86 95       	lsr	r24
     e02:	87 70       	andi	r24, 0x07	; 7
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	81 70       	andi	r24, 0x01	; 1
     e0a:	90 70       	andi	r25, 0x00	; 0
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	a1 f3       	breq	.-24     	; 0xdf8 <MUART_voidTransmit+0xc>
	UDR = A_u8Data;
     e10:	ec e2       	ldi	r30, 0x2C	; 44
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	80 83       	st	Z, r24

}
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <MUART_u8Recieve>:

u8 MUART_u8Recieve(){
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	/*Wait Till Recieve Buffer Is complete*/
	while(GET_BIT(UCSRA, 7) == 0);
     e28:	eb e2       	ldi	r30, 0x2B	; 43
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	88 23       	and	r24, r24
     e30:	dc f7       	brge	.-10     	; 0xe28 <MUART_u8Recieve+0x8>
	return UDR;
     e32:	ec e2       	ldi	r30, 0x2C	; 44
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
}
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <MI2C_voidMasterInit>:
#include"../../LIB/BIT_MATH.h"
#include<avr/io.h>
#include"TWI_Interface.h"


void MI2C_voidMasterInit(){
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	TWBR = 10;
     e46:	e0 e2       	ldi	r30, 0x20	; 32
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	80 83       	st	Z, r24
	TWSR = 0;
     e4e:	e1 e2       	ldi	r30, 0x21	; 33
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <MI2C_voidStart>:

void MI2C_voidStart(){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<7)|(1<<2)|(1<<5);
     e62:	e6 e5       	ldi	r30, 0x56	; 86
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	84 ea       	ldi	r24, 0xA4	; 164
     e68:	80 83       	st	Z, r24

	// Wait Till flag raised
	while(GET_BIT(TWCR, 7) == 0);
     e6a:	e6 e5       	ldi	r30, 0x56	; 86
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	dc f7       	brge	.-10     	; 0xe6a <MI2C_voidStart+0x10>

	//Wait till starting transmitted
	while((TWSR & 0xf8) != 0x08);
     e74:	e1 e2       	ldi	r30, 0x21	; 33
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	88 7f       	andi	r24, 0xF8	; 248
     e80:	90 70       	andi	r25, 0x00	; 0
     e82:	88 30       	cpi	r24, 0x08	; 8
     e84:	91 05       	cpc	r25, r1
     e86:	b1 f7       	brne	.-20     	; 0xe74 <MI2C_voidStart+0x1a>

}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <MI2C_voidWriteData>:

void MI2C_voidWriteData(u8 A_u8Data){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01

	TWDR = A_u8Data;
     e9a:	e3 e2       	ldi	r30, 0x23	; 35
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	80 83       	st	Z, r24
	TWCR = (1<<7)|(1<<2);
     ea2:	e6 e5       	ldi	r30, 0x56	; 86
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	84 e8       	ldi	r24, 0x84	; 132
     ea8:	80 83       	st	Z, r24

	// Wait Till flag raised
	while(GET_BIT(TWCR, 7) == 0);
     eaa:	e6 e5       	ldi	r30, 0x56	; 86
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	dc f7       	brge	.-10     	; 0xeaa <MI2C_voidWriteData+0x1c>

	//Wait Till data has been transmitted
	while((TWSR & 0xf8) != 0x28);
     eb4:	e1 e2       	ldi	r30, 0x21	; 33
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	88 7f       	andi	r24, 0xF8	; 248
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	88 32       	cpi	r24, 0x28	; 40
     ec4:	91 05       	cpc	r25, r1
     ec6:	b1 f7       	brne	.-20     	; 0xeb4 <MI2C_voidWriteData+0x26>
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <MI2C_voidWriteAdderess>:

void MI2C_voidWriteAdderess(u8 A_u8Address){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01

	TWDR = A_u8Address;
     edc:	e3 e2       	ldi	r30, 0x23	; 35
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	80 83       	st	Z, r24
	TWCR = (1<<7)|(1<<2);
     ee4:	e6 e5       	ldi	r30, 0x56	; 86
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	84 e8       	ldi	r24, 0x84	; 132
     eea:	80 83       	st	Z, r24

	// Wait Till flag raised
	while(GET_BIT(TWCR, 7) == 0);
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	88 23       	and	r24, r24
     ef4:	dc f7       	brge	.-10     	; 0xeec <MI2C_voidWriteAdderess+0x1c>

	//Wait Till data has been transmitted
	while((TWSR & 0xf8) != 0x18);
     ef6:	e1 e2       	ldi	r30, 0x21	; 33
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	90 70       	andi	r25, 0x00	; 0
     f04:	88 31       	cpi	r24, 0x18	; 24
     f06:	91 05       	cpc	r25, r1
     f08:	b1 f7       	brne	.-20     	; 0xef6 <MI2C_voidWriteAdderess+0x26>

}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <MI2C_voidSetSlaveAddress>:

void MI2C_voidSetSlaveAddress(u8 A_u8Address){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
	TWAR = A_u8Address;
     f1e:	e2 e2       	ldi	r30, 0x22	; 34
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <MI2C_u8SlaveReading>:

u8 MI2C_u8SlaveReading(){
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<7)|(1<<2)|(1<<6);
     f36:	e6 e5       	ldi	r30, 0x56	; 86
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	84 ec       	ldi	r24, 0xC4	; 196
     f3c:	80 83       	st	Z, r24
	// Wait Till flag raised
	while(GET_BIT(TWCR, 7) == 0);
     f3e:	e6 e5       	ldi	r30, 0x56	; 86
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	88 23       	and	r24, r24
     f46:	dc f7       	brge	.-10     	; 0xf3e <MI2C_u8SlaveReading+0x10>
	while((TWSR & 0xf8) != 0x60);
     f48:	e1 e2       	ldi	r30, 0x21	; 33
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	90 70       	andi	r25, 0x00	; 0
     f56:	80 36       	cpi	r24, 0x60	; 96
     f58:	91 05       	cpc	r25, r1
     f5a:	b1 f7       	brne	.-20     	; 0xf48 <MI2C_u8SlaveReading+0x1a>


	TWCR = (1<<7)|(1<<2)|(1<<6);
     f5c:	e6 e5       	ldi	r30, 0x56	; 86
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	84 ec       	ldi	r24, 0xC4	; 196
     f62:	80 83       	st	Z, r24
	// Wait Till flag raised
	while(GET_BIT(TWCR, 7) == 0);
     f64:	e6 e5       	ldi	r30, 0x56	; 86
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	dc f7       	brge	.-10     	; 0xf64 <MI2C_u8SlaveReading+0x36>
	while((TWSR & 0xf8) != 0x80);
     f6e:	e1 e2       	ldi	r30, 0x21	; 33
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 7f       	andi	r24, 0xF8	; 248
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	80 38       	cpi	r24, 0x80	; 128
     f7e:	91 05       	cpc	r25, r1
     f80:	b1 f7       	brne	.-20     	; 0xf6e <MI2C_u8SlaveReading+0x40>

	return TWDR;
     f82:	e3 e2       	ldi	r30, 0x23	; 35
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z

}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <MI2C_voidStop>:

void MI2C_voidStop(){
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<7)|(1<<2)|(1<<4);
     f96:	e6 e5       	ldi	r30, 0x56	; 86
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	84 e9       	ldi	r24, 0x94	; 148
     f9c:	80 83       	st	Z, r24
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <MSPI_voidMasterInit>:
#include"../../LIB/STD_TYPES.h"
#include"../../LIB/BIT_MATH.h"
#include<avr/io.h>


void MSPI_voidMasterInit(){
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62

	/*Master Select*/
	SET_BIT(SPCR, 4);
     fac:	ad e2       	ldi	r26, 0x2D	; 45
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ed e2       	ldi	r30, 0x2D	; 45
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 61       	ori	r24, 0x10	; 16
     fb8:	8c 93       	st	X, r24

	/*Master Clock sck prescaller 16*/
	SET_BIT(SPCR, 0);
     fba:	ad e2       	ldi	r26, 0x2D	; 45
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ed e2       	ldi	r30, 0x2D	; 45
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
     fc8:	ad e2       	ldi	r26, 0x2D	; 45
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ed e2       	ldi	r30, 0x2D	; 45
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	8c 93       	st	X, r24
	CLR_BIT(SPSR,0);
     fd6:	ae e2       	ldi	r26, 0x2E	; 46
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ee e2       	ldi	r30, 0x2E	; 46
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	8c 93       	st	X, r24

	/*Spi Enable*/
	SET_BIT(SPCR, 6);
     fe4:	ad e2       	ldi	r26, 0x2D	; 45
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ed e2       	ldi	r30, 0x2D	; 45
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	8c 93       	st	X, r24
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <MSPI_voidSlaveInit>:


void MSPI_voidSlaveInit(){
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	/*Slave Select*/
	CLR_BIT(SPCR, 4);
    1000:	ad e2       	ldi	r26, 0x2D	; 45
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ed e2       	ldi	r30, 0x2D	; 45
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7e       	andi	r24, 0xEF	; 239
    100c:	8c 93       	st	X, r24
	/*Enable Spi*/
	SET_BIT(SPCR, 6);
    100e:	ad e2       	ldi	r26, 0x2D	; 45
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ed e2       	ldi	r30, 0x2D	; 45
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <MSPI_u8Transcieve>:

u8 MSPI_u8Transcieve(u8 A_u8Data){
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01

	/*Transmit Data*/
	SPDR = A_u8Data;
    102e:	ef e2       	ldi	r30, 0x2F	; 47
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	80 83       	st	Z, r24

	/*Wait Till Data is Transfered*/
	while(GET_BIT(SPSR,7) == 0);
    1036:	ee e2       	ldi	r30, 0x2E	; 46
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	dc f7       	brge	.-10     	; 0x1036 <MSPI_u8Transcieve+0x14>

	/*Access SPDR*/
	return SPDR;
    1040:	ef e2       	ldi	r30, 0x2F	; 47
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
}
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <MEXTI_voidSenseControl>:
 * 3--------> Rising
 *
 * */


void MEXTI_voidSenseControl(u8 A_u8ExtiNumber, u8 A_u8State){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	2a 97       	sbiw	r28, 0x0a	; 10
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02


	switch(A_u8ExtiNumber){
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3a 87       	std	Y+10, r19	; 0x0a
    106e:	29 87       	std	Y+9, r18	; 0x09
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <MEXTI_voidSenseControl+0x2e>
    107a:	66 c0       	rjmp	.+204    	; 0x1148 <MEXTI_voidSenseControl+0xfa>
    107c:	29 85       	ldd	r18, Y+9	; 0x09
    107e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <MEXTI_voidSenseControl+0x3a>
    1086:	bb c0       	rjmp	.+374    	; 0x11fe <MEXTI_voidSenseControl+0x1b0>
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	09 f0       	breq	.+2      	; 0x1092 <MEXTI_voidSenseControl+0x44>
    1090:	d5 c0       	rjmp	.+426    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
		/*EXTI INT0*/
		case 0:
			switch(A_u8State){
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	38 87       	std	Y+8, r19	; 0x08
    109a:	2f 83       	std	Y+7, r18	; 0x07
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	21 f1       	breq	.+72     	; 0x10ee <MEXTI_voidSenseControl+0xa0>
    10a6:	2f 81       	ldd	r18, Y+7	; 0x07
    10a8:	38 85       	ldd	r19, Y+8	; 0x08
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	2c f4       	brge	.+10     	; 0x10ba <MEXTI_voidSenseControl+0x6c>
    10b0:	8f 81       	ldd	r24, Y+7	; 0x07
    10b2:	98 85       	ldd	r25, Y+8	; 0x08
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	61 f0       	breq	.+24     	; 0x10d0 <MEXTI_voidSenseControl+0x82>
    10b8:	c1 c0       	rjmp	.+386    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
    10ba:	2f 81       	ldd	r18, Y+7	; 0x07
    10bc:	38 85       	ldd	r19, Y+8	; 0x08
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	21 f1       	breq	.+72     	; 0x110c <MEXTI_voidSenseControl+0xbe>
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	71 f1       	breq	.+92     	; 0x112a <MEXTI_voidSenseControl+0xdc>
    10ce:	b6 c0       	rjmp	.+364    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,0);
    10d0:	a5 e5       	ldi	r26, 0x55	; 85
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e5       	ldi	r30, 0x55	; 85
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    10de:	a5 e5       	ldi	r26, 0x55	; 85
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e5       	ldi	r30, 0x55	; 85
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	8c 93       	st	X, r24
    10ec:	a7 c0       	rjmp	.+334    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
    10ee:	a5 e5       	ldi	r26, 0x55	; 85
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e5       	ldi	r30, 0x55	; 85
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	81 60       	ori	r24, 0x01	; 1
    10fa:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    10fc:	a5 e5       	ldi	r26, 0x55	; 85
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e5       	ldi	r30, 0x55	; 85
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8d 7f       	andi	r24, 0xFD	; 253
    1108:	8c 93       	st	X, r24
    110a:	98 c0       	rjmp	.+304    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
    110c:	a5 e5       	ldi	r26, 0x55	; 85
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e5       	ldi	r30, 0x55	; 85
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    111a:	a5 e5       	ldi	r26, 0x55	; 85
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e5       	ldi	r30, 0x55	; 85
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	82 60       	ori	r24, 0x02	; 2
    1126:	8c 93       	st	X, r24
    1128:	89 c0       	rjmp	.+274    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 0);
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    1138:	a5 e5       	ldi	r26, 0x55	; 85
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e5       	ldi	r30, 0x55	; 85
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	8c 93       	st	X, r24
    1146:	7a c0       	rjmp	.+244    	; 0x123c <MEXTI_voidSenseControl+0x1ee>

			}
		break;
		/*EXTI INT1*/
		case 1:
			switch(A_u8State){
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	21 f1       	breq	.+72     	; 0x11a4 <MEXTI_voidSenseControl+0x156>
    115c:	2d 81       	ldd	r18, Y+5	; 0x05
    115e:	3e 81       	ldd	r19, Y+6	; 0x06
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <MEXTI_voidSenseControl+0x122>
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <MEXTI_voidSenseControl+0x138>
    116e:	66 c0       	rjmp	.+204    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	21 f1       	breq	.+72     	; 0x11c2 <MEXTI_voidSenseControl+0x174>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	71 f1       	breq	.+92     	; 0x11e0 <MEXTI_voidSenseControl+0x192>
    1184:	5b c0       	rjmp	.+182    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				case 0:
					CLR_BIT(MCUCR,2);
    1186:	a5 e5       	ldi	r26, 0x55	; 85
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e5       	ldi	r30, 0x55	; 85
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8b 7f       	andi	r24, 0xFB	; 251
    1192:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	8c 93       	st	X, r24
    11a2:	4c c0       	rjmp	.+152    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
    11a4:	a5 e5       	ldi	r26, 0x55	; 85
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e5       	ldi	r30, 0x55	; 85
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	84 60       	ori	r24, 0x04	; 4
    11b0:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	87 7f       	andi	r24, 0xF7	; 247
    11be:	8c 93       	st	X, r24
    11c0:	3d c0       	rjmp	.+122    	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
    11c2:	a5 e5       	ldi	r26, 0x55	; 85
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e5       	ldi	r30, 0x55	; 85
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8b 7f       	andi	r24, 0xFB	; 251
    11ce:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    11d0:	a5 e5       	ldi	r26, 0x55	; 85
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e5       	ldi	r30, 0x55	; 85
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	8c 93       	st	X, r24
    11de:	2e c0       	rjmp	.+92     	; 0x123c <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
    11e0:	a5 e5       	ldi	r26, 0x55	; 85
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e5 e5       	ldi	r30, 0x55	; 85
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	84 60       	ori	r24, 0x04	; 4
    11ec:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    11ee:	a5 e5       	ldi	r26, 0x55	; 85
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e5       	ldi	r30, 0x55	; 85
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	88 60       	ori	r24, 0x08	; 8
    11fa:	8c 93       	st	X, r24
    11fc:	1f c0       	rjmp	.+62     	; 0x123c <MEXTI_voidSenseControl+0x1ee>
			}
		break;

		/*EXTI INT2*/
		case 2:
			switch(A_u8State){
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3c 83       	std	Y+4, r19	; 0x04
    1206:	2b 83       	std	Y+3, r18	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	91 05       	cpc	r25, r1
    1210:	31 f0       	breq	.+12     	; 0x121e <MEXTI_voidSenseControl+0x1d0>
    1212:	2b 81       	ldd	r18, Y+3	; 0x03
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	23 30       	cpi	r18, 0x03	; 3
    1218:	31 05       	cpc	r19, r1
    121a:	49 f0       	breq	.+18     	; 0x122e <MEXTI_voidSenseControl+0x1e0>
    121c:	0f c0       	rjmp	.+30     	; 0x123c <MEXTI_voidSenseControl+0x1ee>
			case 2: CLR_BIT(MCUCSR, 6);break;
    121e:	a4 e5       	ldi	r26, 0x54	; 84
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e4 e5       	ldi	r30, 0x54	; 84
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8f 7b       	andi	r24, 0xBF	; 191
    122a:	8c 93       	st	X, r24
    122c:	07 c0       	rjmp	.+14     	; 0x123c <MEXTI_voidSenseControl+0x1ee>
			case 3: SET_BIT(MCUCSR, 6);break;
    122e:	a4 e5       	ldi	r26, 0x54	; 84
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e4 e5       	ldi	r30, 0x54	; 84
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	8c 93       	st	X, r24
			}
		break;

	}
}
    123c:	2a 96       	adiw	r28, 0x0a	; 10
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <MEXTI_voidEnable>:


void MEXTI_voidEnable(u8 A_u8ExtiNumber){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <MEXTI_voidEnable+0x6>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3b 83       	std	Y+3, r19	; 0x03
    1264:	2a 83       	std	Y+2, r18	; 0x02
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	9b 81       	ldd	r25, Y+3	; 0x03
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	89 f0       	breq	.+34     	; 0x1292 <MEXTI_voidEnable+0x44>
    1270:	2a 81       	ldd	r18, Y+2	; 0x02
    1272:	3b 81       	ldd	r19, Y+3	; 0x03
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	a1 f0       	breq	.+40     	; 0x12a2 <MEXTI_voidEnable+0x54>
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	b9 f4       	brne	.+46     	; 0x12b0 <MEXTI_voidEnable+0x62>
		case 0: SET_BIT( GICR, 6); break;
    1282:	ab e5       	ldi	r26, 0x5B	; 91
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e5       	ldi	r30, 0x5B	; 91
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	80 64       	ori	r24, 0x40	; 64
    128e:	8c 93       	st	X, r24
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <MEXTI_voidEnable+0x62>
		case 1: SET_BIT( GICR, 7); break;
    1292:	ab e5       	ldi	r26, 0x5B	; 91
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e5       	ldi	r30, 0x5B	; 91
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	8c 93       	st	X, r24
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <MEXTI_voidEnable+0x62>
		case 2: SET_BIT(GICR, 5); break;
    12a2:	ab e5       	ldi	r26, 0x5B	; 91
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb e5       	ldi	r30, 0x5B	; 91
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 62       	ori	r24, 0x20	; 32
    12ae:	8c 93       	st	X, r24
	}

}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8ExtiNumber){
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <MEXTI_voidDisable+0x6>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNumber){
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3b 83       	std	Y+3, r19	; 0x03
    12d2:	2a 83       	std	Y+2, r18	; 0x02
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	9b 81       	ldd	r25, Y+3	; 0x03
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	89 f0       	breq	.+34     	; 0x1300 <MEXTI_voidDisable+0x44>
    12de:	2a 81       	ldd	r18, Y+2	; 0x02
    12e0:	3b 81       	ldd	r19, Y+3	; 0x03
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	a1 f0       	breq	.+40     	; 0x1310 <MEXTI_voidDisable+0x54>
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	b9 f4       	brne	.+46     	; 0x131e <MEXTI_voidDisable+0x62>
		case 0: CLR_BIT( GICR, 6); break;
    12f0:	ab e5       	ldi	r26, 0x5B	; 91
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e5       	ldi	r30, 0x5B	; 91
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7b       	andi	r24, 0xBF	; 191
    12fc:	8c 93       	st	X, r24
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <MEXTI_voidDisable+0x62>
		case 1: CLR_BIT( GICR, 7); break;
    1300:	ab e5       	ldi	r26, 0x5B	; 91
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e5       	ldi	r30, 0x5B	; 91
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 77       	andi	r24, 0x7F	; 127
    130c:	8c 93       	st	X, r24
    130e:	07 c0       	rjmp	.+14     	; 0x131e <MEXTI_voidDisable+0x62>
		case 2: CLR_BIT(GICR, 5); break;
    1310:	ab e5       	ldi	r26, 0x5B	; 91
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	eb e5       	ldi	r30, 0x5B	; 91
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7d       	andi	r24, 0xDF	; 223
    131c:	8c 93       	st	X, r24
	}
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <MDIO_voidSetPinDirection>:
#include<avr/io.h>
#include"DIO_Interface.h"



void  MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	2d 97       	sbiw	r28, 0x0d	; 13
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	6a 83       	std	Y+2, r22	; 0x02
    1342:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNumber){
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3d 87       	std	Y+13, r19	; 0x0d
    134c:	2c 87       	std	Y+12, r18	; 0x0c
    134e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1350:	9d 85       	ldd	r25, Y+13	; 0x0d
    1352:	82 34       	cpi	r24, 0x42	; 66
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <MDIO_voidSetPinDirection+0x30>
    1358:	50 c0       	rjmp	.+160    	; 0x13fa <MDIO_voidSetPinDirection+0xd0>
    135a:	2c 85       	ldd	r18, Y+12	; 0x0c
    135c:	3d 85       	ldd	r19, Y+13	; 0x0d
    135e:	23 34       	cpi	r18, 0x43	; 67
    1360:	31 05       	cpc	r19, r1
    1362:	34 f4       	brge	.+12     	; 0x1370 <MDIO_voidSetPinDirection+0x46>
    1364:	8c 85       	ldd	r24, Y+12	; 0x0c
    1366:	9d 85       	ldd	r25, Y+13	; 0x0d
    1368:	81 34       	cpi	r24, 0x41	; 65
    136a:	91 05       	cpc	r25, r1
    136c:	71 f0       	breq	.+28     	; 0x138a <MDIO_voidSetPinDirection+0x60>
    136e:	ec c0       	rjmp	.+472    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
    1370:	2c 85       	ldd	r18, Y+12	; 0x0c
    1372:	3d 85       	ldd	r19, Y+13	; 0x0d
    1374:	23 34       	cpi	r18, 0x43	; 67
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <MDIO_voidSetPinDirection+0x52>
    137a:	77 c0       	rjmp	.+238    	; 0x146a <MDIO_voidSetPinDirection+0x140>
    137c:	8c 85       	ldd	r24, Y+12	; 0x0c
    137e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1380:	84 34       	cpi	r24, 0x44	; 68
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <MDIO_voidSetPinDirection+0x5e>
    1386:	a9 c0       	rjmp	.+338    	; 0x14da <MDIO_voidSetPinDirection+0x1b0>
    1388:	df c0       	rjmp	.+446    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
		case 'A':
			switch(A_u8Dir){
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3b 87       	std	Y+11, r19	; 0x0b
    1392:	2a 87       	std	Y+10, r18	; 0x0a
    1394:	8a 85       	ldd	r24, Y+10	; 0x0a
    1396:	9b 85       	ldd	r25, Y+11	; 0x0b
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	31 f0       	breq	.+12     	; 0x13a8 <MDIO_voidSetPinDirection+0x7e>
    139c:	2a 85       	ldd	r18, Y+10	; 0x0a
    139e:	3b 85       	ldd	r19, Y+11	; 0x0b
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <MDIO_voidSetPinDirection+0xa8>
    13a6:	d0 c0       	rjmp	.+416    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRA , A_u8PinNumber);break;
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <MDIO_voidSetPinDirection+0x9c>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <MDIO_voidSetPinDirection+0x98>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	bb c0       	rjmp	.+374    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_voidSetPinDirection+0xc6>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_voidSetPinDirection+0xc2>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	a7 c0       	rjmp	.+334    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'B':
			switch(A_u8Dir){
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	39 87       	std	Y+9, r19	; 0x09
    1402:	28 87       	std	Y+8, r18	; 0x08
    1404:	88 85       	ldd	r24, Y+8	; 0x08
    1406:	99 85       	ldd	r25, Y+9	; 0x09
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	31 f0       	breq	.+12     	; 0x1418 <MDIO_voidSetPinDirection+0xee>
    140c:	28 85       	ldd	r18, Y+8	; 0x08
    140e:	39 85       	ldd	r19, Y+9	; 0x09
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f0       	breq	.+44     	; 0x1442 <MDIO_voidSetPinDirection+0x118>
    1416:	98 c0       	rjmp	.+304    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRB , A_u8PinNumber);break;
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_voidSetPinDirection+0x10c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_voidSetPinDirection+0x108>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	83 c0       	rjmp	.+262    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    1442:	a7 e3       	ldi	r26, 0x37	; 55
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <MDIO_voidSetPinDirection+0x136>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <MDIO_voidSetPinDirection+0x132>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	6f c0       	rjmp	.+222    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'C':
			switch(A_u8Dir){
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3f 83       	std	Y+7, r19	; 0x07
    1472:	2e 83       	std	Y+6, r18	; 0x06
    1474:	8e 81       	ldd	r24, Y+6	; 0x06
    1476:	9f 81       	ldd	r25, Y+7	; 0x07
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	31 f0       	breq	.+12     	; 0x1488 <MDIO_voidSetPinDirection+0x15e>
    147c:	2e 81       	ldd	r18, Y+6	; 0x06
    147e:	3f 81       	ldd	r19, Y+7	; 0x07
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	b1 f0       	breq	.+44     	; 0x14b2 <MDIO_voidSetPinDirection+0x188>
    1486:	60 c0       	rjmp	.+192    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRC , A_u8PinNumber);break;
    1488:	a4 e3       	ldi	r26, 0x34	; 52
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <MDIO_voidSetPinDirection+0x17c>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <MDIO_voidSetPinDirection+0x178>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	4b c0       	rjmp	.+150    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    14b2:	a4 e3       	ldi	r26, 0x34	; 52
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <MDIO_voidSetPinDirection+0x1a6>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <MDIO_voidSetPinDirection+0x1a2>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	37 c0       	rjmp	.+110    	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
			}
		break;
		case 'D':
			switch(A_u8Dir){
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3d 83       	std	Y+5, r19	; 0x05
    14e2:	2c 83       	std	Y+4, r18	; 0x04
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <MDIO_voidSetPinDirection+0x1ce>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	b1 f0       	breq	.+44     	; 0x1522 <MDIO_voidSetPinDirection+0x1f8>
    14f6:	28 c0       	rjmp	.+80     	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 0:CLR_BIT(DDRD , A_u8PinNumber);break;
    14f8:	a1 e3       	ldi	r26, 0x31	; 49
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e1 e3       	ldi	r30, 0x31	; 49
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <MDIO_voidSetPinDirection+0x1ec>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <MDIO_voidSetPinDirection+0x1e8>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <MDIO_voidSetPinDirection+0x21e>
				case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    1522:	a1 e3       	ldi	r26, 0x31	; 49
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <MDIO_voidSetPinDirection+0x216>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <MDIO_voidSetPinDirection+0x212>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
			}
		break;
	}

}
    1548:	2d 96       	adiw	r28, 0x0d	; 13
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	2d 97       	sbiw	r28, 0x0d	; 13
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02
    1572:	4b 83       	std	Y+3, r20	; 0x03

	switch(A_u8PortNumber){
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3d 87       	std	Y+13, r19	; 0x0d
    157c:	2c 87       	std	Y+12, r18	; 0x0c
    157e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1580:	9d 85       	ldd	r25, Y+13	; 0x0d
    1582:	82 34       	cpi	r24, 0x42	; 66
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <MDIO_voidSetPinValue+0x30>
    1588:	50 c0       	rjmp	.+160    	; 0x162a <MDIO_voidSetPinValue+0xd0>
    158a:	2c 85       	ldd	r18, Y+12	; 0x0c
    158c:	3d 85       	ldd	r19, Y+13	; 0x0d
    158e:	23 34       	cpi	r18, 0x43	; 67
    1590:	31 05       	cpc	r19, r1
    1592:	34 f4       	brge	.+12     	; 0x15a0 <MDIO_voidSetPinValue+0x46>
    1594:	8c 85       	ldd	r24, Y+12	; 0x0c
    1596:	9d 85       	ldd	r25, Y+13	; 0x0d
    1598:	81 34       	cpi	r24, 0x41	; 65
    159a:	91 05       	cpc	r25, r1
    159c:	71 f0       	breq	.+28     	; 0x15ba <MDIO_voidSetPinValue+0x60>
    159e:	ec c0       	rjmp	.+472    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
    15a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    15a4:	23 34       	cpi	r18, 0x43	; 67
    15a6:	31 05       	cpc	r19, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <MDIO_voidSetPinValue+0x52>
    15aa:	77 c0       	rjmp	.+238    	; 0x169a <MDIO_voidSetPinValue+0x140>
    15ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b0:	84 34       	cpi	r24, 0x44	; 68
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <MDIO_voidSetPinValue+0x5e>
    15b6:	a9 c0       	rjmp	.+338    	; 0x170a <MDIO_voidSetPinValue+0x1b0>
    15b8:	df c0       	rjmp	.+446    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
		case 'A':
			switch(A_u8PinValue){
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3b 87       	std	Y+11, r19	; 0x0b
    15c2:	2a 87       	std	Y+10, r18	; 0x0a
    15c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <MDIO_voidSetPinValue+0x7e>
    15cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    15d0:	21 30       	cpi	r18, 0x01	; 1
    15d2:	31 05       	cpc	r19, r1
    15d4:	b1 f0       	breq	.+44     	; 0x1602 <MDIO_voidSetPinValue+0xa8>
    15d6:	d0 c0       	rjmp	.+416    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTA , A_u8PinNumber); break;
    15d8:	ab e3       	ldi	r26, 0x3B	; 59
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	eb e3       	ldi	r30, 0x3B	; 59
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <MDIO_voidSetPinValue+0x9c>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <MDIO_voidSetPinValue+0x98>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	bb c0       	rjmp	.+374    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTA, A_u8PinNumber); break;
    1602:	ab e3       	ldi	r26, 0x3B	; 59
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	eb e3       	ldi	r30, 0x3B	; 59
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <MDIO_voidSetPinValue+0xc6>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <MDIO_voidSetPinValue+0xc2>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	a7 c0       	rjmp	.+334    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'B':
			switch(A_u8PinValue){
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	39 87       	std	Y+9, r19	; 0x09
    1632:	28 87       	std	Y+8, r18	; 0x08
    1634:	88 85       	ldd	r24, Y+8	; 0x08
    1636:	99 85       	ldd	r25, Y+9	; 0x09
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	31 f0       	breq	.+12     	; 0x1648 <MDIO_voidSetPinValue+0xee>
    163c:	28 85       	ldd	r18, Y+8	; 0x08
    163e:	39 85       	ldd	r19, Y+9	; 0x09
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	31 05       	cpc	r19, r1
    1644:	b1 f0       	breq	.+44     	; 0x1672 <MDIO_voidSetPinValue+0x118>
    1646:	98 c0       	rjmp	.+304    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTB , A_u8PinNumber); break;
    1648:	a8 e3       	ldi	r26, 0x38	; 56
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e8 e3       	ldi	r30, 0x38	; 56
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <MDIO_voidSetPinValue+0x10c>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <MDIO_voidSetPinValue+0x108>
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	83 c0       	rjmp	.+262    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTB, A_u8PinNumber); break;
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <MDIO_voidSetPinValue+0x136>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <MDIO_voidSetPinValue+0x132>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	6f c0       	rjmp	.+222    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
			}

		break;

		case 'C':
			switch(A_u8PinValue){
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3f 83       	std	Y+7, r19	; 0x07
    16a2:	2e 83       	std	Y+6, r18	; 0x06
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	9f 81       	ldd	r25, Y+7	; 0x07
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	31 f0       	breq	.+12     	; 0x16b8 <MDIO_voidSetPinValue+0x15e>
    16ac:	2e 81       	ldd	r18, Y+6	; 0x06
    16ae:	3f 81       	ldd	r19, Y+7	; 0x07
    16b0:	21 30       	cpi	r18, 0x01	; 1
    16b2:	31 05       	cpc	r19, r1
    16b4:	b1 f0       	breq	.+44     	; 0x16e2 <MDIO_voidSetPinValue+0x188>
    16b6:	60 c0       	rjmp	.+192    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTC , A_u8PinNumber); break;
    16b8:	a5 e3       	ldi	r26, 0x35	; 53
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <MDIO_voidSetPinValue+0x17c>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <MDIO_voidSetPinValue+0x178>
    16da:	80 95       	com	r24
    16dc:	84 23       	and	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	4b c0       	rjmp	.+150    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTC, A_u8PinNumber); break;
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <MDIO_voidSetPinValue+0x1a6>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <MDIO_voidSetPinValue+0x1a2>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	37 c0       	rjmp	.+110    	; 0x1778 <MDIO_voidSetPinValue+0x21e>
			}
		break;
		case 'D':
			switch(A_u8PinValue){
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	31 f0       	breq	.+12     	; 0x1728 <MDIO_voidSetPinValue+0x1ce>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	21 30       	cpi	r18, 0x01	; 1
    1722:	31 05       	cpc	r19, r1
    1724:	b1 f0       	breq	.+44     	; 0x1752 <MDIO_voidSetPinValue+0x1f8>
    1726:	28 c0       	rjmp	.+80     	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 0: CLR_BIT(PORTD , A_u8PinNumber); break;
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <MDIO_voidSetPinValue+0x1ec>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <MDIO_voidSetPinValue+0x1e8>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <MDIO_voidSetPinValue+0x21e>
				case 1:SET_BIT(PORTD, A_u8PinNumber); break;
    1752:	a2 e3       	ldi	r26, 0x32	; 50
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <MDIO_voidSetPinValue+0x216>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <MDIO_voidSetPinValue+0x212>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
			}
		break;
	}
}
    1778:	2d 96       	adiw	r28, 0x0d	; 13
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8PortDir){
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <MDIO_voidSetPortDirection+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <MDIO_voidSetPortDirection+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3c 83       	std	Y+4, r19	; 0x04
    17a2:	2b 83       	std	Y+3, r18	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	82 34       	cpi	r24, 0x42	; 66
    17aa:	91 05       	cpc	r25, r1
    17ac:	d9 f0       	breq	.+54     	; 0x17e4 <MDIO_voidSetPortDirection+0x5a>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	23 34       	cpi	r18, 0x43	; 67
    17b4:	31 05       	cpc	r19, r1
    17b6:	34 f4       	brge	.+12     	; 0x17c4 <MDIO_voidSetPortDirection+0x3a>
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	81 34       	cpi	r24, 0x41	; 65
    17be:	91 05       	cpc	r25, r1
    17c0:	61 f0       	breq	.+24     	; 0x17da <MDIO_voidSetPortDirection+0x50>
    17c2:	1e c0       	rjmp	.+60     	; 0x1800 <MDIO_voidSetPortDirection+0x76>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	23 34       	cpi	r18, 0x43	; 67
    17ca:	31 05       	cpc	r19, r1
    17cc:	81 f0       	breq	.+32     	; 0x17ee <MDIO_voidSetPortDirection+0x64>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	84 34       	cpi	r24, 0x44	; 68
    17d4:	91 05       	cpc	r25, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <MDIO_voidSetPortDirection+0x6e>
    17d8:	13 c0       	rjmp	.+38     	; 0x1800 <MDIO_voidSetPortDirection+0x76>
		case 'A': DDRA = A_u8PortDir; break;
    17da:	ea e3       	ldi	r30, 0x3A	; 58
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 83       	st	Z, r24
    17e2:	0e c0       	rjmp	.+28     	; 0x1800 <MDIO_voidSetPortDirection+0x76>
		case 'B': DDRB = A_u8PortDir; break;
    17e4:	e7 e3       	ldi	r30, 0x37	; 55
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 83       	st	Z, r24
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <MDIO_voidSetPortDirection+0x76>
		case 'C': DDRC = A_u8PortDir; break;
    17ee:	e4 e3       	ldi	r30, 0x34	; 52
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	80 83       	st	Z, r24
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <MDIO_voidSetPortDirection+0x76>
		case 'D': DDRD = A_u8PortDir; break;
    17f8:	e1 e3       	ldi	r30, 0x31	; 49
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
	}
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue){
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <MDIO_voidSetPortValue+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <MDIO_voidSetPortValue+0x8>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNumber){
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3c 83       	std	Y+4, r19	; 0x04
    1826:	2b 83       	std	Y+3, r18	; 0x03
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	82 34       	cpi	r24, 0x42	; 66
    182e:	91 05       	cpc	r25, r1
    1830:	d9 f0       	breq	.+54     	; 0x1868 <MDIO_voidSetPortValue+0x5a>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	23 34       	cpi	r18, 0x43	; 67
    1838:	31 05       	cpc	r19, r1
    183a:	34 f4       	brge	.+12     	; 0x1848 <MDIO_voidSetPortValue+0x3a>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	81 34       	cpi	r24, 0x41	; 65
    1842:	91 05       	cpc	r25, r1
    1844:	61 f0       	breq	.+24     	; 0x185e <MDIO_voidSetPortValue+0x50>
    1846:	1e c0       	rjmp	.+60     	; 0x1884 <MDIO_voidSetPortValue+0x76>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	23 34       	cpi	r18, 0x43	; 67
    184e:	31 05       	cpc	r19, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <MDIO_voidSetPortValue+0x64>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	84 34       	cpi	r24, 0x44	; 68
    1858:	91 05       	cpc	r25, r1
    185a:	81 f0       	breq	.+32     	; 0x187c <MDIO_voidSetPortValue+0x6e>
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <MDIO_voidSetPortValue+0x76>
		case 'A':PORTA = A_u8PortValue; break;
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	80 83       	st	Z, r24
    1866:	0e c0       	rjmp	.+28     	; 0x1884 <MDIO_voidSetPortValue+0x76>
		case 'B':PORTB = A_u8PortValue; break;
    1868:	e8 e3       	ldi	r30, 0x38	; 56
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <MDIO_voidSetPortValue+0x76>
		case 'C':PORTC = A_u8PortValue; break;
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <MDIO_voidSetPortValue+0x76>
		case 'D':PORTD = A_u8PortValue; break;
    187c:	e2 e3       	ldi	r30, 0x32	; 50
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 83       	st	Z, r24
	}
}
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <MDIO_u8GetPinValue>:
 * MDIO_u8GetPinValue -----> 255 ----> there is an error
 *
 *
 * */

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber){
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <MDIO_u8GetPinValue+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <MDIO_u8GetPinValue+0x8>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	8a 83       	std	Y+2, r24	; 0x02
    18a2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Result;

	if(A_u8PinNumber < 8){
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	88 30       	cpi	r24, 0x08	; 8
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <MDIO_u8GetPinValue+0x1a>
    18aa:	68 c0       	rjmp	.+208    	; 0x197c <MDIO_u8GetPinValue+0xea>
		switch(A_u8PortNumber){
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3d 83       	std	Y+5, r19	; 0x05
    18b4:	2c 83       	std	Y+4, r18	; 0x04
    18b6:	4c 81       	ldd	r20, Y+4	; 0x04
    18b8:	5d 81       	ldd	r21, Y+5	; 0x05
    18ba:	42 34       	cpi	r20, 0x42	; 66
    18bc:	51 05       	cpc	r21, r1
    18be:	41 f1       	breq	.+80     	; 0x1910 <MDIO_u8GetPinValue+0x7e>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	83 34       	cpi	r24, 0x43	; 67
    18c6:	91 05       	cpc	r25, r1
    18c8:	34 f4       	brge	.+12     	; 0x18d6 <MDIO_u8GetPinValue+0x44>
    18ca:	2c 81       	ldd	r18, Y+4	; 0x04
    18cc:	3d 81       	ldd	r19, Y+5	; 0x05
    18ce:	21 34       	cpi	r18, 0x41	; 65
    18d0:	31 05       	cpc	r19, r1
    18d2:	61 f0       	breq	.+24     	; 0x18ec <MDIO_u8GetPinValue+0x5a>
    18d4:	55 c0       	rjmp	.+170    	; 0x1980 <MDIO_u8GetPinValue+0xee>
    18d6:	4c 81       	ldd	r20, Y+4	; 0x04
    18d8:	5d 81       	ldd	r21, Y+5	; 0x05
    18da:	43 34       	cpi	r20, 0x43	; 67
    18dc:	51 05       	cpc	r21, r1
    18de:	51 f1       	breq	.+84     	; 0x1934 <MDIO_u8GetPinValue+0xa2>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	84 34       	cpi	r24, 0x44	; 68
    18e6:	91 05       	cpc	r25, r1
    18e8:	b9 f1       	breq	.+110    	; 0x1958 <MDIO_u8GetPinValue+0xc6>
    18ea:	4a c0       	rjmp	.+148    	; 0x1980 <MDIO_u8GetPinValue+0xee>
			case 'A':Local_u8Result =  GET_BIT(PINA, A_u8PinNumber);break;
    18ec:	e9 e3       	ldi	r30, 0x39	; 57
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a9 01       	movw	r20, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <MDIO_u8GetPinValue+0x72>
    1900:	55 95       	asr	r21
    1902:	47 95       	ror	r20
    1904:	8a 95       	dec	r24
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <MDIO_u8GetPinValue+0x6e>
    1908:	ca 01       	movw	r24, r20
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	38 c0       	rjmp	.+112    	; 0x1980 <MDIO_u8GetPinValue+0xee>
			case 'B':Local_u8Result =  GET_BIT(PINB, A_u8PinNumber); break;
    1910:	e6 e3       	ldi	r30, 0x36	; 54
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a9 01       	movw	r20, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <MDIO_u8GetPinValue+0x96>
    1924:	55 95       	asr	r21
    1926:	47 95       	ror	r20
    1928:	8a 95       	dec	r24
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <MDIO_u8GetPinValue+0x92>
    192c:	ca 01       	movw	r24, r20
    192e:	81 70       	andi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	26 c0       	rjmp	.+76     	; 0x1980 <MDIO_u8GetPinValue+0xee>
			case 'C':Local_u8Result =  GET_BIT(PINC, A_u8PinNumber); break;
    1934:	e3 e3       	ldi	r30, 0x33	; 51
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a9 01       	movw	r20, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <MDIO_u8GetPinValue+0xba>
    1948:	55 95       	asr	r21
    194a:	47 95       	ror	r20
    194c:	8a 95       	dec	r24
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <MDIO_u8GetPinValue+0xb6>
    1950:	ca 01       	movw	r24, r20
    1952:	81 70       	andi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <MDIO_u8GetPinValue+0xee>
			case 'D':Local_u8Result =  GET_BIT(PIND, A_u8PinNumber); break;
    1958:	e0 e3       	ldi	r30, 0x30	; 48
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <MDIO_u8GetPinValue+0xde>
    196c:	55 95       	asr	r21
    196e:	47 95       	ror	r20
    1970:	8a 95       	dec	r24
    1972:	e2 f7       	brpl	.-8      	; 0x196c <MDIO_u8GetPinValue+0xda>
    1974:	ca 01       	movw	r24, r20
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <MDIO_u8GetPinValue+0xee>
		}
	}
	else {
		Local_u8Result = 255;
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <MADC_voidInit>:
 * Internal     2
 *
 * */


void MADC_voidInit(u8 A_u8Vref){
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <MADC_voidInit+0x6>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01

	switch(A_u8Vref){
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3b 83       	std	Y+3, r19	; 0x03
    19a8:	2a 83       	std	Y+2, r18	; 0x02
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	c1 f0       	breq	.+48     	; 0x19e4 <MADC_voidInit+0x52>
    19b4:	2a 81       	ldd	r18, Y+2	; 0x02
    19b6:	3b 81       	ldd	r19, Y+3	; 0x03
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	11 f1       	breq	.+68     	; 0x1a02 <MADC_voidInit+0x70>
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	61 f5       	brne	.+88     	; 0x1a1e <MADC_voidInit+0x8c>
		case 0:
			CLR_BIT(ADMUX, 6);
    19c6:	a7 e2       	ldi	r26, 0x27	; 39
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e7 e2       	ldi	r30, 0x27	; 39
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7b       	andi	r24, 0xBF	; 191
    19d2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    19d4:	a7 e2       	ldi	r26, 0x27	; 39
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e7 e2       	ldi	r30, 0x27	; 39
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8f 77       	andi	r24, 0x7F	; 127
    19e0:	8c 93       	st	X, r24
    19e2:	1d c0       	rjmp	.+58     	; 0x1a1e <MADC_voidInit+0x8c>
		break;

		case 1:
			SET_BIT(ADMUX, 6);
    19e4:	a7 e2       	ldi	r26, 0x27	; 39
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e7 e2       	ldi	r30, 0x27	; 39
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 64       	ori	r24, 0x40	; 64
    19f0:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, 7);
    19f2:	a7 e2       	ldi	r26, 0x27	; 39
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e7 e2       	ldi	r30, 0x27	; 39
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8f 77       	andi	r24, 0x7F	; 127
    19fe:	8c 93       	st	X, r24
    1a00:	0e c0       	rjmp	.+28     	; 0x1a1e <MADC_voidInit+0x8c>
		break;

		case 2:
			SET_BIT(ADMUX, 6);
    1a02:	a7 e2       	ldi	r26, 0x27	; 39
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e7 e2       	ldi	r30, 0x27	; 39
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 64       	ori	r24, 0x40	; 64
    1a0e:	8c 93       	st	X, r24
			SET_BIT(ADMUX, 7);
    1a10:	a7 e2       	ldi	r26, 0x27	; 39
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e7 e2       	ldi	r30, 0x27	; 39
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	8c 93       	st	X, r24
		break;
	}
	/*Left|Right Adjust*/
	SET_BIT(ADMUX, 5);
    1a1e:	a7 e2       	ldi	r26, 0x27	; 39
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e7 e2       	ldi	r30, 0x27	; 39
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	8c 93       	st	X, r24

	/*128 Prescaller*/
	SET_BIT(ADCSRA, 0);
    1a2c:	a6 e2       	ldi	r26, 0x26	; 38
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e6 e2       	ldi	r30, 0x26	; 38
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1a3a:	a6 e2       	ldi	r26, 0x26	; 38
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e6 e2       	ldi	r30, 0x26	; 38
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1a48:	a6 e2       	ldi	r26, 0x26	; 38
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e6 e2       	ldi	r30, 0x26	; 38
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA, 7);
    1a56:	a6 e2       	ldi	r26, 0x26	; 38
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e6 e2       	ldi	r30, 0x26	; 38
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	8c 93       	st	X, r24
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <MADC_u8GetChannelReading>:


u8 MADC_u8GetChannelReading(u8 A_u8Channel){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = ADMUX & 0b11100000;
    1a7c:	a7 e2       	ldi	r26, 0x27	; 39
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e2       	ldi	r30, 0x27	; 39
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 7e       	andi	r24, 0xE0	; 224
    1a88:	8c 93       	st	X, r24
	ADMUX = ADMUX|A_u8Channel;
    1a8a:	a7 e2       	ldi	r26, 0x27	; 39
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e7 e2       	ldi	r30, 0x27	; 39
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	90 81       	ld	r25, Z
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	89 2b       	or	r24, r25
    1a98:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    1a9a:	a6 e2       	ldi	r26, 0x26	; 38
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e6 e2       	ldi	r30, 0x26	; 38
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 64       	ori	r24, 0x40	; 64
    1aa6:	8c 93       	st	X, r24

	/*Wait Till Adc Flag Is Fired (1) */
	while(GET_BIT(ADCSRA, 4) == 0);
    1aa8:	e6 e2       	ldi	r30, 0x26	; 38
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	82 95       	swap	r24
    1ab0:	8f 70       	andi	r24, 0x0F	; 15
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	81 70       	andi	r24, 0x01	; 1
    1ab8:	90 70       	andi	r25, 0x00	; 0
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	a9 f3       	breq	.-22     	; 0x1aa8 <MADC_u8GetChannelReading+0x38>
	/*Clear ADC FLAG*/
	SET_BIT(ADCSRA, 4);
    1abe:	a6 e2       	ldi	r26, 0x26	; 38
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e6 e2       	ldi	r30, 0x26	; 38
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 61       	ori	r24, 0x10	; 16
    1aca:	8c 93       	st	X, r24

	return ADCH;
    1acc:	e5 e2       	ldi	r30, 0x25	; 37
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z

}
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <HLCD_voidSendCommand>:
#include<avr/delay.h>




void HLCD_voidSendCommand(u8 A_u8Cmd){
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	6d 97       	sbiw	r28, 0x1d	; 29
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Intailize control Pins Rs/ RW*/
	MDIO_voidSetPinValue('A', 0, 0);
    1af0:	81 e4       	ldi	r24, 0x41	; 65
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A', 1, 0);
    1afa:	81 e4       	ldi	r24, 0x41	; 65
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>

	/*Write Command on data Pins*/
	MDIO_voidSetPortValue('C', A_u8Cmd);
    1b04:	83 e4       	ldi	r24, 0x43	; 67
    1b06:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b08:	0e 94 07 0c 	call	0x180e	; 0x180e <MDIO_voidSetPortValue>

	/*Pulse On Enable Pin*/
	MDIO_voidSetPinValue('A', 2, 1);
    1b0c:	81 e4       	ldi	r24, 0x41	; 65
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e8       	ldi	r26, 0x80	; 128
    1b1c:	bf e3       	ldi	r27, 0x3F	; 63
    1b1e:	89 8f       	std	Y+25, r24	; 0x19
    1b20:	9a 8f       	std	Y+26, r25	; 0x1a
    1b22:	ab 8f       	std	Y+27, r26	; 0x1b
    1b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	69 8d       	ldd	r22, Y+25	; 0x19
    1b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a ef       	ldi	r20, 0xFA	; 250
    1b34:	54 e4       	ldi	r21, 0x44	; 68
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8d 8b       	std	Y+21, r24	; 0x15
    1b40:	9e 8b       	std	Y+22, r25	; 0x16
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9c 8b       	std	Y+20, r25	; 0x14
    1ba6:	8b 8b       	std	Y+19, r24	; 0x13
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <HLCD_voidSendCommand+0xee>
    1baa:	88 ec       	ldi	r24, 0xC8	; 200
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <HLCD_voidSendCommand+0xdc>
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <HLCD_voidSendCommand+0xd0>
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <HLCD_voidSendCommand+0x118>
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('A', 2, 0);
    1bfa:	81 e4       	ldi	r24, 0x41	; 65
    1bfc:	62 e0       	ldi	r22, 0x02	; 2
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a0 e8       	ldi	r26, 0x80	; 128
    1c0a:	bf e3       	ldi	r27, 0x3F	; 63
    1c0c:	8b 87       	std	Y+11, r24	; 0x0b
    1c0e:	9c 87       	std	Y+12, r25	; 0x0c
    1c10:	ad 87       	std	Y+13, r26	; 0x0d
    1c12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8f 83       	std	Y+7, r24	; 0x07
    1c2e:	98 87       	std	Y+8, r25	; 0x08
    1c30:	a9 87       	std	Y+9, r26	; 0x09
    1c32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c34:	6f 81       	ldd	r22, Y+7	; 0x07
    1c36:	78 85       	ldd	r23, Y+8	; 0x08
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	4c f5       	brge	.+82     	; 0x1cc0 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <HLCD_voidSendCommand+0x1dc>
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9c 83       	std	Y+4, r25	; 0x04
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <HLCD_voidSendCommand+0x1ca>
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <HLCD_voidSendCommand+0x1be>
    1cbe:	14 c0       	rjmp	.+40     	; 0x1ce8 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <HLCD_voidSendCommand+0x206>
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ce8:	6d 96       	adiw	r28, 0x1d	; 29
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data){
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	6d 97       	sbiw	r28, 0x1d	; 29
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Intailize control Pins Rs/ RW*/
	MDIO_voidSetPinValue('A', 0, 1);
    1d10:	81 e4       	ldi	r24, 0x41	; 65
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('A', 1, 0);
    1d1a:	81 e4       	ldi	r24, 0x41	; 65
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>

	/*Write Command on data Pins*/
	MDIO_voidSetPortValue('C', A_u8Data);
    1d24:	83 e4       	ldi	r24, 0x43	; 67
    1d26:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d28:	0e 94 07 0c 	call	0x180e	; 0x180e <MDIO_voidSetPortValue>

	/*Pulse On Enable Pin*/
	MDIO_voidSetPinValue('A', 2, 1);
    1d2c:	81 e4       	ldi	r24, 0x41	; 65
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	89 8f       	std	Y+25, r24	; 0x19
    1d40:	9a 8f       	std	Y+26, r25	; 0x1a
    1d42:	ab 8f       	std	Y+27, r26	; 0x1b
    1d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	69 8d       	ldd	r22, Y+25	; 0x19
    1d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a ef       	ldi	r20, 0xFA	; 250
    1d54:	54 e4       	ldi	r21, 0x44	; 68
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8d 8b       	std	Y+21, r24	; 0x15
    1d60:	9e 8b       	std	Y+22, r25	; 0x16
    1d62:	af 8b       	std	Y+23, r26	; 0x17
    1d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d66:	6d 89       	ldd	r22, Y+21	; 0x15
    1d68:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1d88:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	69 8d       	ldd	r22, Y+25	; 0x19
    1da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <HLCD_voidSendData+0xee>
    1dca:	88 ec       	ldi	r24, 0xC8	; 200
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9a 8b       	std	Y+18, r25	; 0x12
    1dd0:	89 8b       	std	Y+17, r24	; 0x11
    1dd2:	89 89       	ldd	r24, Y+17	; 0x11
    1dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <HLCD_voidSendData+0xdc>
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <HLCD_voidSendData+0xd0>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
    1e06:	8b 89       	ldd	r24, Y+19	; 0x13
    1e08:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0a:	98 8b       	std	Y+16, r25	; 0x10
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
    1e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e10:	98 89       	ldd	r25, Y+16	; 0x10
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <HLCD_voidSendData+0x118>
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('A', 2, 0);
    1e1a:	81 e4       	ldi	r24, 0x41	; 65
    1e1c:	62 e0       	ldi	r22, 0x02	; 2
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a0 e8       	ldi	r26, 0x80	; 128
    1e2a:	bf e3       	ldi	r27, 0x3F	; 63
    1e2c:	8b 87       	std	Y+11, r24	; 0x0b
    1e2e:	9c 87       	std	Y+12, r25	; 0x0c
    1e30:	ad 87       	std	Y+13, r26	; 0x0d
    1e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a ef       	ldi	r20, 0xFA	; 250
    1e42:	54 e4       	ldi	r21, 0x44	; 68
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	8f 83       	std	Y+7, r24	; 0x07
    1e4e:	98 87       	std	Y+8, r25	; 0x08
    1e50:	a9 87       	std	Y+9, r26	; 0x09
    1e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e68:	88 23       	and	r24, r24
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	3f c0       	rjmp	.+126    	; 0x1ef4 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	4c f5       	brge	.+82     	; 0x1ee0 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <HLCD_voidSendData+0x1dc>
    1eb8:	88 ec       	ldi	r24, 0xC8	; 200
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <HLCD_voidSendData+0x1ca>
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	69 f7       	brne	.-38     	; 0x1eb8 <HLCD_voidSendData+0x1be>
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <HLCD_voidSendData+0x206>
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f08:	6d 96       	adiw	r28, 0x1d	; 29
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <HLCD_voidInit>:
void HLCD_voidInit(){
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	e8 97       	sbiw	r28, 0x38	; 56
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 ef       	ldi	r26, 0xF0	; 240
    1f34:	b1 e4       	ldi	r27, 0x41	; 65
    1f36:	8d ab       	std	Y+53, r24	; 0x35
    1f38:	9e ab       	std	Y+54, r25	; 0x36
    1f3a:	af ab       	std	Y+55, r26	; 0x37
    1f3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f40:	7e a9       	ldd	r23, Y+54	; 0x36
    1f42:	8f a9       	ldd	r24, Y+55	; 0x37
    1f44:	98 ad       	ldd	r25, Y+56	; 0x38
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	89 ab       	std	Y+49, r24	; 0x31
    1f58:	9a ab       	std	Y+50, r25	; 0x32
    1f5a:	ab ab       	std	Y+51, r26	; 0x33
    1f5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f60:	7a a9       	ldd	r23, Y+50	; 0x32
    1f62:	8b a9       	ldd	r24, Y+51	; 0x33
    1f64:	9c a9       	ldd	r25, Y+52	; 0x34
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <HLCD_voidInit+0x66>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	8f a7       	std	Y+47, r24	; 0x2f
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <HLCD_voidInit+0xc6>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9e a7       	std	Y+46, r25	; 0x2e
    1fc8:	8d a7       	std	Y+45, r24	; 0x2d
    1fca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <HLCD_voidInit+0xb4>
    1fd2:	9e a7       	std	Y+46, r25	; 0x2e
    1fd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	98 ab       	std	Y+48, r25	; 0x30
    1fde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <HLCD_voidInit+0xa8>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	69 a9       	ldd	r22, Y+49	; 0x31
    1fec:	7a a9       	ldd	r23, Y+50	; 0x32
    1fee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
    1ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2000:	98 a9       	ldd	r25, Y+48	; 0x30
    2002:	9c a7       	std	Y+44, r25	; 0x2c
    2004:	8b a7       	std	Y+43, r24	; 0x2b
    2006:	8b a5       	ldd	r24, Y+43	; 0x2b
    2008:	9c a5       	ldd	r25, Y+44	; 0x2c
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <HLCD_voidInit+0xf0>
    200e:	9c a7       	std	Y+44, r25	; 0x2c
    2010:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);

	/*Function set 0b00111100
	 *
	 * */
	HLCD_voidSendCommand(0b00111000);
    2012:	88 e3       	ldi	r24, 0x38	; 56
    2014:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <HLCD_voidSendCommand>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	8f a3       	std	Y+39, r24	; 0x27
    2022:	98 a7       	std	Y+40, r25	; 0x28
    2024:	a9 a7       	std	Y+41, r26	; 0x29
    2026:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6f a1       	ldd	r22, Y+39	; 0x27
    202a:	78 a5       	ldd	r23, Y+40	; 0x28
    202c:	89 a5       	ldd	r24, Y+41	; 0x29
    202e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8b a3       	std	Y+35, r24	; 0x23
    2042:	9c a3       	std	Y+36, r25	; 0x24
    2044:	ad a3       	std	Y+37, r26	; 0x25
    2046:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2048:	6b a1       	ldd	r22, Y+35	; 0x23
    204a:	7c a1       	ldd	r23, Y+36	; 0x24
    204c:	8d a1       	ldd	r24, Y+37	; 0x25
    204e:	9e a1       	ldd	r25, Y+38	; 0x26
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <HLCD_voidInit+0x150>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9a a3       	std	Y+34, r25	; 0x22
    2066:	89 a3       	std	Y+33, r24	; 0x21
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    206a:	6b a1       	ldd	r22, Y+35	; 0x23
    206c:	7c a1       	ldd	r23, Y+36	; 0x24
    206e:	8d a1       	ldd	r24, Y+37	; 0x25
    2070:	9e a1       	ldd	r25, Y+38	; 0x26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6f a1       	ldd	r22, Y+39	; 0x27
    2084:	78 a5       	ldd	r23, Y+40	; 0x28
    2086:	89 a5       	ldd	r24, Y+41	; 0x29
    2088:	9a a5       	ldd	r25, Y+42	; 0x2a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <HLCD_voidInit+0x1b0>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	98 a3       	std	Y+32, r25	; 0x20
    20b2:	8f 8f       	std	Y+31, r24	; 0x1f
    20b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20b6:	98 a1       	ldd	r25, Y+32	; 0x20
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <HLCD_voidInit+0x19e>
    20bc:	98 a3       	std	Y+32, r25	; 0x20
    20be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	89 a1       	ldd	r24, Y+33	; 0x21
    20c2:	9a a1       	ldd	r25, Y+34	; 0x22
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9a a3       	std	Y+34, r25	; 0x22
    20c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	89 a1       	ldd	r24, Y+33	; 0x21
    20cc:	9a a1       	ldd	r25, Y+34	; 0x22
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <HLCD_voidInit+0x192>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9a a3       	std	Y+34, r25	; 0x22
    20e6:	89 a3       	std	Y+33, r24	; 0x21
    20e8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ea:	9a a1       	ldd	r25, Y+34	; 0x22
    20ec:	9e 8f       	std	Y+30, r25	; 0x1e
    20ee:	8d 8f       	std	Y+29, r24	; 0x1d
    20f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <HLCD_voidInit+0x1da>
    20f8:	9e 8f       	std	Y+30, r25	; 0x1e
    20fa:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Display on/off
	 * 0b00001111
	 *
	 * */
	HLCD_voidSendCommand(0b00001111);
    20fc:	8f e0       	ldi	r24, 0x0F	; 15
    20fe:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <HLCD_voidSendCommand>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	89 8f       	std	Y+25, r24	; 0x19
    210c:	9a 8f       	std	Y+26, r25	; 0x1a
    210e:	ab 8f       	std	Y+27, r26	; 0x1b
    2110:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	69 8d       	ldd	r22, Y+25	; 0x19
    2114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8d 8b       	std	Y+21, r24	; 0x15
    212c:	9e 8b       	std	Y+22, r25	; 0x16
    212e:	af 8b       	std	Y+23, r26	; 0x17
    2130:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2132:	6d 89       	ldd	r22, Y+21	; 0x15
    2134:	7e 89       	ldd	r23, Y+22	; 0x16
    2136:	8f 89       	ldd	r24, Y+23	; 0x17
    2138:	98 8d       	ldd	r25, Y+24	; 0x18
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <HLCD_voidInit+0x23a>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    2154:	6d 89       	ldd	r22, Y+21	; 0x15
    2156:	7e 89       	ldd	r23, Y+22	; 0x16
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	98 8d       	ldd	r25, Y+24	; 0x18
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	69 8d       	ldd	r22, Y+25	; 0x19
    216e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <HLCD_voidInit+0x29a>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9a 8b       	std	Y+18, r25	; 0x12
    219c:	89 8b       	std	Y+17, r24	; 0x11
    219e:	89 89       	ldd	r24, Y+17	; 0x11
    21a0:	9a 89       	ldd	r25, Y+18	; 0x12
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <HLCD_voidInit+0x288>
    21a6:	9a 8b       	std	Y+18, r25	; 0x12
    21a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8b 89       	ldd	r24, Y+19	; 0x13
    21b6:	9c 89       	ldd	r25, Y+20	; 0x14
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <HLCD_voidInit+0x27c>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6d 89       	ldd	r22, Y+21	; 0x15
    21c0:	7e 89       	ldd	r23, Y+22	; 0x16
    21c2:	8f 89       	ldd	r24, Y+23	; 0x17
    21c4:	98 8d       	ldd	r25, Y+24	; 0x18
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	98 8b       	std	Y+16, r25	; 0x10
    21d8:	8f 87       	std	Y+15, r24	; 0x0f
    21da:	8f 85       	ldd	r24, Y+15	; 0x0f
    21dc:	98 89       	ldd	r25, Y+16	; 0x10
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <HLCD_voidInit+0x2c4>
    21e2:	98 8b       	std	Y+16, r25	; 0x10
    21e4:	8f 87       	std	Y+15, r24	; 0x0f
	/*Wait for 39 Micro sec*/
	_delay_ms(1);
	/*
	 * Display Clear 0b 0000 0001
	 * */
	HLCD_voidSendCommand(0b00000001);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <HLCD_voidSendCommand>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e0       	ldi	r26, 0x00	; 0
    21f2:	b0 e4       	ldi	r27, 0x40	; 64
    21f4:	8b 87       	std	Y+11, r24	; 0x0b
    21f6:	9c 87       	std	Y+12, r25	; 0x0c
    21f8:	ad 87       	std	Y+13, r26	; 0x0d
    21fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	8d 85       	ldd	r24, Y+13	; 0x0d
    2202:	9e 85       	ldd	r25, Y+14	; 0x0e
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a ef       	ldi	r20, 0xFA	; 250
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8f 83       	std	Y+7, r24	; 0x07
    2216:	98 87       	std	Y+8, r25	; 0x08
    2218:	a9 87       	std	Y+9, r26	; 0x09
    221a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221c:	6f 81       	ldd	r22, Y+7	; 0x07
    221e:	78 85       	ldd	r23, Y+8	; 0x08
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <HLCD_voidInit+0x324>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    223e:	6f 81       	ldd	r22, Y+7	; 0x07
    2240:	78 85       	ldd	r23, Y+8	; 0x08
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	9a 85       	ldd	r25, Y+10	; 0x0a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	6b 85       	ldd	r22, Y+11	; 0x0b
    2258:	7c 85       	ldd	r23, Y+12	; 0x0c
    225a:	8d 85       	ldd	r24, Y+13	; 0x0d
    225c:	9e 85       	ldd	r25, Y+14	; 0x0e
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	0f c0       	rjmp	.+30     	; 0x229e <HLCD_voidInit+0x384>
    2280:	88 ec       	ldi	r24, 0xC8	; 200
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <HLCD_voidInit+0x372>
    2290:	9c 83       	std	Y+4, r25	; 0x04
    2292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <HLCD_voidInit+0x366>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <HLCD_voidInit+0x3ae>
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01

	/*Entry Set Mode
	 *
	 * 0b00000110
	 * */
	HLCD_voidSendCommand(0b00000110);
    22d0:	86 e0       	ldi	r24, 0x06	; 6
    22d2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <HLCD_voidSendCommand>


}
    22d6:	e8 96       	adiw	r28, 0x38	; 56
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <HLCD_voidSendString>:




void HLCD_voidSendString(u8 *String){
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <HLCD_voidSendString+0x6>
    22ee:	0f 92       	push	r0
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    22f8:	19 82       	std	Y+1, r1	; 0x01
    22fa:	0e c0       	rjmp	.+28     	; 0x2318 <HLCD_voidSendString+0x30>
	while(String[i] != '\0'){
		HLCD_voidSendData(String[i]);
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	e2 0f       	add	r30, r18
    230a:	f3 1f       	adc	r31, r19
    230c:	80 81       	ld	r24, Z
    230e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <HLCD_voidSendData>
		i++;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	89 83       	std	Y+1, r24	; 0x01



void HLCD_voidSendString(u8 *String){
	u8 i =0;
	while(String[i] != '\0'){
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	9b 81       	ldd	r25, Y+3	; 0x03
    2322:	fc 01       	movw	r30, r24
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	80 81       	ld	r24, Z
    232a:	88 23       	and	r24, r24
    232c:	39 f7       	brne	.-50     	; 0x22fc <HLCD_voidSendString+0x14>
		HLCD_voidSendData(String[i]);
		i++;
	}
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <HLCD_voidGoto>:

void HLCD_voidGoto(u8 A_u8Row, u8 A_u8Col){
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <HLCD_voidGoto+0x6>
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	6b 83       	std	Y+3, r22	; 0x03

	u8 L_u8DdramAddress=0;
    234a:	19 82       	std	Y+1, r1	; 0x01

	if(A_u8Row < 2 && A_u8Col < 16){
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	90 f4       	brcc	.+36     	; 0x2376 <HLCD_voidGoto+0x3c>
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	80 31       	cpi	r24, 0x10	; 16
    2356:	78 f4       	brcc	.+30     	; 0x2376 <HLCD_voidGoto+0x3c>

		if(A_u8Row == 0){
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	88 23       	and	r24, r24
    235c:	19 f4       	brne	.+6      	; 0x2364 <HLCD_voidGoto+0x2a>
			L_u8DdramAddress = 0x00+A_u8Col;
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	03 c0       	rjmp	.+6      	; 0x236a <HLCD_voidGoto+0x30>
		}
		else{
			L_u8DdramAddress = 0x40+A_u8Col;
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	80 5c       	subi	r24, 0xC0	; 192
    2368:	89 83       	std	Y+1, r24	; 0x01
		}

		SET_BIT(L_u8DdramAddress, 7);
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	80 68       	ori	r24, 0x80	; 128
    236e:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DdramAddress);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <HLCD_voidSendCommand>
	}
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	28 97       	sbiw	r28, 0x08	; 8
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	6d 83       	std	Y+5, r22	; 0x05
    23a0:	7e 83       	std	Y+6, r23	; 0x06
    23a2:	8f 83       	std	Y+7, r24	; 0x07
    23a4:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	ab 83       	std	Y+3, r26	; 0x03
    23b4:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	af 81       	ldd	r26, Y+7	; 0x07
    23bc:	b8 85       	ldd	r27, Y+8	; 0x08
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	a1 05       	cpc	r26, r1
    23c2:	b1 05       	cpc	r27, r1
    23c4:	19 f4       	brne	.+6      	; 0x23cc <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    23c6:	80 e3       	ldi	r24, 0x30	; 48
    23c8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	af 81       	ldd	r26, Y+7	; 0x07
    23d2:	b8 85       	ldd	r27, Y+8	; 0x08
    23d4:	bb 23       	and	r27, r27
    23d6:	0c f0       	brlt	.+2      	; 0x23da <HLCD_voidDisplayNumber+0x58>
    23d8:	49 c0       	rjmp	.+146    	; 0x246c <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    23da:	8d e2       	ldi	r24, 0x2D	; 45
    23dc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <HLCD_voidSendData>
		A_s32Number *=-1;
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	af 81       	ldd	r26, Y+7	; 0x07
    23e6:	b8 85       	ldd	r27, Y+8	; 0x08
    23e8:	b0 95       	com	r27
    23ea:	a0 95       	com	r26
    23ec:	90 95       	com	r25
    23ee:	81 95       	neg	r24
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	af 4f       	sbci	r26, 0xFF	; 255
    23f4:	bf 4f       	sbci	r27, 0xFF	; 255
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	af 83       	std	Y+7, r26	; 0x07
    23fc:	b8 87       	std	Y+8, r27	; 0x08
    23fe:	36 c0       	rjmp	.+108    	; 0x246c <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	ab 81       	ldd	r26, Y+3	; 0x03
    2406:	bc 81       	ldd	r27, Y+4	; 0x04
    2408:	2a e0       	ldi	r18, 0x0A	; 10
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsi3>
    2418:	7b 01       	movw	r14, r22
    241a:	8c 01       	movw	r16, r24
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	af 81       	ldd	r26, Y+7	; 0x07
    2422:	b8 85       	ldd	r27, Y+8	; 0x08
    2424:	2a e0       	ldi	r18, 0x0A	; 10
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 98 13 	call	0x2730	; 0x2730 <__divmodsi4>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8e 0d       	add	r24, r14
    243a:	9f 1d       	adc	r25, r15
    243c:	a0 1f       	adc	r26, r16
    243e:	b1 1f       	adc	r27, r17
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	ab 83       	std	Y+3, r26	; 0x03
    2446:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	af 81       	ldd	r26, Y+7	; 0x07
    244e:	b8 85       	ldd	r27, Y+8	; 0x08
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 98 13 	call	0x2730	; 0x2730 <__divmodsi4>
    2460:	da 01       	movw	r26, r20
    2462:	c9 01       	movw	r24, r18
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	af 83       	std	Y+7, r26	; 0x07
    246a:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	af 81       	ldd	r26, Y+7	; 0x07
    2472:	b8 85       	ldd	r27, Y+8	; 0x08
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	a1 05       	cpc	r26, r1
    2478:	b1 05       	cpc	r27, r1
    247a:	11 f6       	brne	.-124    	; 0x2400 <HLCD_voidDisplayNumber+0x7e>
    247c:	23 c0       	rjmp	.+70     	; 0x24c4 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	ab 81       	ldd	r26, Y+3	; 0x03
    2484:	bc 81       	ldd	r27, Y+4	; 0x04
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 76 13 	call	0x26ec	; 0x26ec <__udivmodsi4>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	80 5d       	subi	r24, 0xD0	; 208
    249c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	ab 81       	ldd	r26, Y+3	; 0x03
    24a6:	bc 81       	ldd	r27, Y+4	; 0x04
    24a8:	2a e0       	ldi	r18, 0x0A	; 10
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 76 13 	call	0x26ec	; 0x26ec <__udivmodsi4>
    24b8:	da 01       	movw	r26, r20
    24ba:	c9 01       	movw	r24, r18
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	ab 83       	std	Y+3, r26	; 0x03
    24c2:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	ab 81       	ldd	r26, Y+3	; 0x03
    24ca:	bc 81       	ldd	r27, Y+4	; 0x04
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	91 05       	cpc	r25, r1
    24d0:	a1 05       	cpc	r26, r1
    24d2:	b1 05       	cpc	r27, r1
    24d4:	a1 f6       	brne	.-88     	; 0x247e <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    24d6:	28 96       	adiw	r28, 0x08	; 8
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	08 95       	ret

000024f0 <HKPD_u8GetPressedKey>:
		{'1', '2', '3', '-'},
		{'#', '0', '=', '+'}
};


u8 HKPD_u8GetPressedKey(){
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <HKPD_u8GetPressedKey+0x6>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <HKPD_u8GetPressedKey+0x8>
    24f8:	0f 92       	push	r0
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62

	u8 L_u8PressedKey = 255, Row, Col;
    24fe:	8f ef       	ldi	r24, 0xFF	; 255
    2500:	8c 83       	std	Y+4, r24	; 0x04

	for(Col =0; Col<4; Col++){
    2502:	1a 82       	std	Y+2, r1	; 0x02
    2504:	3e c0       	rjmp	.+124    	; 0x2582 <HKPD_u8GetPressedKey+0x92>
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D', Col, 0);
    2506:	84 e4       	ldi	r24, 0x44	; 68
    2508:	6a 81       	ldd	r22, Y+2	; 0x02
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>

		for(Row = 0; Row<4; Row++){
    2510:	1b 82       	std	Y+3, r1	; 0x03
    2512:	2c c0       	rjmp	.+88     	; 0x256c <HKPD_u8GetPressedKey+0x7c>
			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row+4));
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	98 2f       	mov	r25, r24
    2518:	9c 5f       	subi	r25, 0xFC	; 252
    251a:	84 e4       	ldi	r24, 0x44	; 68
    251c:	69 2f       	mov	r22, r25
    251e:	0e 94 49 0c 	call	0x1892	; 0x1892 <MDIO_u8GetPinValue>
    2522:	89 83       	std	Y+1, r24	; 0x01

			if(L_u8PinValue == 0){
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	88 23       	and	r24, r24
    2528:	f1 f4       	brne	.+60     	; 0x2566 <HKPD_u8GetPressedKey+0x76>
				L_u8PressedKey = G_u8KeyPadButtons[Row][Col];
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	48 2f       	mov	r20, r24
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	ca 01       	movw	r24, r20
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	82 0f       	add	r24, r18
    2542:	93 1f       	adc	r25, r19
    2544:	fc 01       	movw	r30, r24
    2546:	e8 59       	subi	r30, 0x98	; 152
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	8c 83       	std	Y+4, r24	; 0x04

				while(MDIO_u8GetPinValue('D', (Row+4)) == 0);
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	98 2f       	mov	r25, r24
    2552:	9c 5f       	subi	r25, 0xFC	; 252
    2554:	84 e4       	ldi	r24, 0x44	; 68
    2556:	69 2f       	mov	r22, r25
    2558:	0e 94 49 0c 	call	0x1892	; 0x1892 <MDIO_u8GetPinValue>
    255c:	88 23       	and	r24, r24
    255e:	b9 f3       	breq	.-18     	; 0x254e <HKPD_u8GetPressedKey+0x5e>

				return L_u8PressedKey;
    2560:	8c 81       	ldd	r24, Y+4	; 0x04
    2562:	8d 83       	std	Y+5, r24	; 0x05
    2564:	14 c0       	rjmp	.+40     	; 0x258e <HKPD_u8GetPressedKey+0x9e>

	for(Col =0; Col<4; Col++){
		/*Activate Current Col*/
		MDIO_voidSetPinValue('D', Col, 0);

		for(Row = 0; Row<4; Row++){
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	8f 5f       	subi	r24, 0xFF	; 255
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	84 30       	cpi	r24, 0x04	; 4
    2570:	88 f2       	brcs	.-94     	; 0x2514 <HKPD_u8GetPressedKey+0x24>
				return L_u8PressedKey;
			}

		}
		/*Deactivate Current Col*/
	   MDIO_voidSetPinValue('D', Col, 1);
    2572:	84 e4       	ldi	r24, 0x44	; 68
    2574:	6a 81       	ldd	r22, Y+2	; 0x02
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>

u8 HKPD_u8GetPressedKey(){

	u8 L_u8PressedKey = 255, Row, Col;

	for(Col =0; Col<4; Col++){
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	8a 83       	std	Y+2, r24	; 0x02
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	08 f4       	brcc	.+2      	; 0x258a <HKPD_u8GetPressedKey+0x9a>
    2588:	be cf       	rjmp	.-132    	; 0x2506 <HKPD_u8GetPressedKey+0x16>
		}
		/*Deactivate Current Col*/
	   MDIO_voidSetPinValue('D', Col, 1);

	}
	return L_u8PressedKey;
    258a:	8c 81       	ldd	r24, Y+4	; 0x04
    258c:	8d 83       	std	Y+5, r24	; 0x05
    258e:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <toggleA1>:
#include"../LIB/BIT_MATH.h"
#include"../MCAL/DIO/DIO_Interface.h"
#include<avr/delay.h>
#include"../RTOS/RTOS/RTOS_Interface.h"

void toggleA1(void){
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue('A', 1, !MDIO_u8GetPinValue('A', 1));
    25aa:	81 e4       	ldi	r24, 0x41	; 65
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	0e 94 49 0c 	call	0x1892	; 0x1892 <MDIO_u8GetPinValue>
    25b2:	19 82       	std	Y+1, r1	; 0x01
    25b4:	88 23       	and	r24, r24
    25b6:	11 f4       	brne	.+4      	; 0x25bc <toggleA1+0x1c>
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	81 e4       	ldi	r24, 0x41	; 65
    25be:	61 e0       	ldi	r22, 0x01	; 1
    25c0:	49 81       	ldd	r20, Y+1	; 0x01
    25c2:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
}
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <toggleA2>:

void toggleA2(void){
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	0f 92       	push	r0
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue('A', 2, !MDIO_u8GetPinValue('A', 2));
    25d8:	81 e4       	ldi	r24, 0x41	; 65
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	0e 94 49 0c 	call	0x1892	; 0x1892 <MDIO_u8GetPinValue>
    25e0:	19 82       	std	Y+1, r1	; 0x01
    25e2:	88 23       	and	r24, r24
    25e4:	11 f4       	brne	.+4      	; 0x25ea <toggleA2+0x1c>
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	81 e4       	ldi	r24, 0x41	; 65
    25ec:	62 e0       	ldi	r22, 0x02	; 2
    25ee:	49 81       	ldd	r20, Y+1	; 0x01
    25f0:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
}
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <toggleA3>:

void toggleA3(void){
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue('A', 3, !MDIO_u8GetPinValue('A', 3));
    2606:	81 e4       	ldi	r24, 0x41	; 65
    2608:	63 e0       	ldi	r22, 0x03	; 3
    260a:	0e 94 49 0c 	call	0x1892	; 0x1892 <MDIO_u8GetPinValue>
    260e:	19 82       	std	Y+1, r1	; 0x01
    2610:	88 23       	and	r24, r24
    2612:	11 f4       	brne	.+4      	; 0x2618 <toggleA3+0x1c>
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	81 e4       	ldi	r24, 0x41	; 65
    261a:	63 e0       	ldi	r22, 0x03	; 3
    261c:	49 81       	ldd	r20, Y+1	; 0x01
    261e:	0e 94 ad 0a 	call	0x155a	; 0x155a <MDIO_voidSetPinValue>
}
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <main>:


int main(){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection('A', 1, 1);
    2632:	81 e4       	ldi	r24, 0x41	; 65
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('A', 2, 1);
    263c:	81 e4       	ldi	r24, 0x41	; 65
    263e:	62 e0       	ldi	r22, 0x02	; 2
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('A', 3, 1);
    2646:	81 e4       	ldi	r24, 0x41	; 65
    2648:	63 e0       	ldi	r22, 0x03	; 3
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinDirection>
	 * Task1 toggle led every 1s
	 * Task2 toggle led every 2s
	 * Task3 toggle led every 3s
	 * */

	RTOS_voidCreateTask(0,1000, &toggleA1);
    2650:	20 ed       	ldi	r18, 0xD0	; 208
    2652:	32 e1       	ldi	r19, 0x12	; 18
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	68 ee       	ldi	r22, 0xE8	; 232
    2658:	73 e0       	ldi	r23, 0x03	; 3
    265a:	a9 01       	movw	r20, r18
    265c:	0e 94 36 06 	call	0xc6c	; 0xc6c <RTOS_voidCreateTask>
	RTOS_voidCreateTask(1,2000, &toggleA2);
    2660:	27 ee       	ldi	r18, 0xE7	; 231
    2662:	32 e1       	ldi	r19, 0x12	; 18
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	60 ed       	ldi	r22, 0xD0	; 208
    2668:	77 e0       	ldi	r23, 0x07	; 7
    266a:	a9 01       	movw	r20, r18
    266c:	0e 94 36 06 	call	0xc6c	; 0xc6c <RTOS_voidCreateTask>
	RTOS_voidCreateTask(2,3000, &toggleA3);
    2670:	2e ef       	ldi	r18, 0xFE	; 254
    2672:	32 e1       	ldi	r19, 0x12	; 18
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	68 eb       	ldi	r22, 0xB8	; 184
    2678:	7b e0       	ldi	r23, 0x0B	; 11
    267a:	a9 01       	movw	r20, r18
    267c:	0e 94 36 06 	call	0xc6c	; 0xc6c <RTOS_voidCreateTask>

	RTOS_voidStart();
    2680:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <RTOS_voidStart>
    2684:	ff cf       	rjmp	.-2      	; 0x2684 <main+0x5a>

00002686 <__mulsi3>:
    2686:	62 9f       	mul	r22, r18
    2688:	d0 01       	movw	r26, r0
    268a:	73 9f       	mul	r23, r19
    268c:	f0 01       	movw	r30, r0
    268e:	82 9f       	mul	r24, r18
    2690:	e0 0d       	add	r30, r0
    2692:	f1 1d       	adc	r31, r1
    2694:	64 9f       	mul	r22, r20
    2696:	e0 0d       	add	r30, r0
    2698:	f1 1d       	adc	r31, r1
    269a:	92 9f       	mul	r25, r18
    269c:	f0 0d       	add	r31, r0
    269e:	83 9f       	mul	r24, r19
    26a0:	f0 0d       	add	r31, r0
    26a2:	74 9f       	mul	r23, r20
    26a4:	f0 0d       	add	r31, r0
    26a6:	65 9f       	mul	r22, r21
    26a8:	f0 0d       	add	r31, r0
    26aa:	99 27       	eor	r25, r25
    26ac:	72 9f       	mul	r23, r18
    26ae:	b0 0d       	add	r27, r0
    26b0:	e1 1d       	adc	r30, r1
    26b2:	f9 1f       	adc	r31, r25
    26b4:	63 9f       	mul	r22, r19
    26b6:	b0 0d       	add	r27, r0
    26b8:	e1 1d       	adc	r30, r1
    26ba:	f9 1f       	adc	r31, r25
    26bc:	bd 01       	movw	r22, r26
    26be:	cf 01       	movw	r24, r30
    26c0:	11 24       	eor	r1, r1
    26c2:	08 95       	ret

000026c4 <__udivmodhi4>:
    26c4:	aa 1b       	sub	r26, r26
    26c6:	bb 1b       	sub	r27, r27
    26c8:	51 e1       	ldi	r21, 0x11	; 17
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <__udivmodhi4_ep>

000026cc <__udivmodhi4_loop>:
    26cc:	aa 1f       	adc	r26, r26
    26ce:	bb 1f       	adc	r27, r27
    26d0:	a6 17       	cp	r26, r22
    26d2:	b7 07       	cpc	r27, r23
    26d4:	10 f0       	brcs	.+4      	; 0x26da <__udivmodhi4_ep>
    26d6:	a6 1b       	sub	r26, r22
    26d8:	b7 0b       	sbc	r27, r23

000026da <__udivmodhi4_ep>:
    26da:	88 1f       	adc	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	5a 95       	dec	r21
    26e0:	a9 f7       	brne	.-22     	; 0x26cc <__udivmodhi4_loop>
    26e2:	80 95       	com	r24
    26e4:	90 95       	com	r25
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	08 95       	ret

000026ec <__udivmodsi4>:
    26ec:	a1 e2       	ldi	r26, 0x21	; 33
    26ee:	1a 2e       	mov	r1, r26
    26f0:	aa 1b       	sub	r26, r26
    26f2:	bb 1b       	sub	r27, r27
    26f4:	fd 01       	movw	r30, r26
    26f6:	0d c0       	rjmp	.+26     	; 0x2712 <__udivmodsi4_ep>

000026f8 <__udivmodsi4_loop>:
    26f8:	aa 1f       	adc	r26, r26
    26fa:	bb 1f       	adc	r27, r27
    26fc:	ee 1f       	adc	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	a2 17       	cp	r26, r18
    2702:	b3 07       	cpc	r27, r19
    2704:	e4 07       	cpc	r30, r20
    2706:	f5 07       	cpc	r31, r21
    2708:	20 f0       	brcs	.+8      	; 0x2712 <__udivmodsi4_ep>
    270a:	a2 1b       	sub	r26, r18
    270c:	b3 0b       	sbc	r27, r19
    270e:	e4 0b       	sbc	r30, r20
    2710:	f5 0b       	sbc	r31, r21

00002712 <__udivmodsi4_ep>:
    2712:	66 1f       	adc	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	88 1f       	adc	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	1a 94       	dec	r1
    271c:	69 f7       	brne	.-38     	; 0x26f8 <__udivmodsi4_loop>
    271e:	60 95       	com	r22
    2720:	70 95       	com	r23
    2722:	80 95       	com	r24
    2724:	90 95       	com	r25
    2726:	9b 01       	movw	r18, r22
    2728:	ac 01       	movw	r20, r24
    272a:	bd 01       	movw	r22, r26
    272c:	cf 01       	movw	r24, r30
    272e:	08 95       	ret

00002730 <__divmodsi4>:
    2730:	97 fb       	bst	r25, 7
    2732:	09 2e       	mov	r0, r25
    2734:	05 26       	eor	r0, r21
    2736:	0e d0       	rcall	.+28     	; 0x2754 <__divmodsi4_neg1>
    2738:	57 fd       	sbrc	r21, 7
    273a:	04 d0       	rcall	.+8      	; 0x2744 <__divmodsi4_neg2>
    273c:	d7 df       	rcall	.-82     	; 0x26ec <__udivmodsi4>
    273e:	0a d0       	rcall	.+20     	; 0x2754 <__divmodsi4_neg1>
    2740:	00 1c       	adc	r0, r0
    2742:	38 f4       	brcc	.+14     	; 0x2752 <__divmodsi4_exit>

00002744 <__divmodsi4_neg2>:
    2744:	50 95       	com	r21
    2746:	40 95       	com	r20
    2748:	30 95       	com	r19
    274a:	21 95       	neg	r18
    274c:	3f 4f       	sbci	r19, 0xFF	; 255
    274e:	4f 4f       	sbci	r20, 0xFF	; 255
    2750:	5f 4f       	sbci	r21, 0xFF	; 255

00002752 <__divmodsi4_exit>:
    2752:	08 95       	ret

00002754 <__divmodsi4_neg1>:
    2754:	f6 f7       	brtc	.-4      	; 0x2752 <__divmodsi4_exit>
    2756:	90 95       	com	r25
    2758:	80 95       	com	r24
    275a:	70 95       	com	r23
    275c:	61 95       	neg	r22
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	8f 4f       	sbci	r24, 0xFF	; 255
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	08 95       	ret

00002766 <__prologue_saves__>:
    2766:	2f 92       	push	r2
    2768:	3f 92       	push	r3
    276a:	4f 92       	push	r4
    276c:	5f 92       	push	r5
    276e:	6f 92       	push	r6
    2770:	7f 92       	push	r7
    2772:	8f 92       	push	r8
    2774:	9f 92       	push	r9
    2776:	af 92       	push	r10
    2778:	bf 92       	push	r11
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	ca 1b       	sub	r28, r26
    2790:	db 0b       	sbc	r29, r27
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	09 94       	ijmp

0000279e <__epilogue_restores__>:
    279e:	2a 88       	ldd	r2, Y+18	; 0x12
    27a0:	39 88       	ldd	r3, Y+17	; 0x11
    27a2:	48 88       	ldd	r4, Y+16	; 0x10
    27a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b0:	b9 84       	ldd	r11, Y+9	; 0x09
    27b2:	c8 84       	ldd	r12, Y+8	; 0x08
    27b4:	df 80       	ldd	r13, Y+7	; 0x07
    27b6:	ee 80       	ldd	r14, Y+6	; 0x06
    27b8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ba:	0c 81       	ldd	r16, Y+4	; 0x04
    27bc:	1b 81       	ldd	r17, Y+3	; 0x03
    27be:	aa 81       	ldd	r26, Y+2	; 0x02
    27c0:	b9 81       	ldd	r27, Y+1	; 0x01
    27c2:	ce 0f       	add	r28, r30
    27c4:	d1 1d       	adc	r29, r1
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	ed 01       	movw	r28, r26
    27d2:	08 95       	ret

000027d4 <_exit>:
    27d4:	f8 94       	cli

000027d6 <__stop_program>:
    27d6:	ff cf       	rjmp	.-2      	; 0x27d6 <__stop_program>
